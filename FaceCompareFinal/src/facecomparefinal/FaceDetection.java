/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package facecomparefinal;

import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.DoubleMatrix2D;
import cern.colt.matrix.doublealgo.Statistic;
import static cern.colt.matrix.doublealgo.Statistic.EUCLID;
import cern.colt.matrix.impl.DenseDoubleMatrix2D;
import cern.colt.matrix.linalg.Algebra;
import cern.colt.matrix.linalg.EigenvalueDecomposition;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import org.opencv.core.Core;

public class FaceDetection extends javax.swing.JFrame
{

    DetectorThread thread;
    BufferedImage output;

    /**
     * Creates new form FaceDetection
     */
    public FaceDetection()
    {
        initComponents();
        errorLabel.setVisible(false);
        index = 0;
    }

    public javax.swing.JPanel getPanel()
    {
        return displayPanel;
    }

    public javax.swing.JLabel getLabel()
    {
        return errorLabel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        displayPanel = new javax.swing.JPanel();
        errorPanel = new javax.swing.JPanel();
        errorLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        NameEnter = new javax.swing.JTextField();
        PasswordEnter = new javax.swing.JTextField();
        cropPanel = new javax.swing.JPanel();
        RecognizeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );

        errorLabel.setText("No Face Detected!");

        javax.swing.GroupLayout errorPanelLayout = new javax.swing.GroupLayout(errorPanel);
        errorPanel.setLayout(errorPanelLayout);
        errorPanelLayout.setHorizontalGroup(
            errorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorPanelLayout.createSequentialGroup()
                .addComponent(errorLabel)
                .addGap(0, 91, Short.MAX_VALUE))
        );
        errorPanelLayout.setVerticalGroup(
            errorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(errorLabel)
        );

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Register");
        pauseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                pauseButtonActionPerformed(evt);
            }
        });

        NameEnter.setText("Enter your name.");
        NameEnter.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                NameEnterFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                NameEnterFocusLost(evt);
            }
        });

        PasswordEnter.setText("Enter your password.");
        PasswordEnter.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                PasswordEnterFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                PasswordEnterFocusLost(evt);
            }
        });
        PasswordEnter.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                PasswordEnterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NameEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseButton)
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(pauseButton)
                    .addComponent(NameEnter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(PasswordEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        RecognizeButton.setText("Recognize");
        RecognizeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RecognizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cropPanelLayout = new javax.swing.GroupLayout(cropPanel);
        cropPanel.setLayout(cropPanelLayout);
        cropPanelLayout.setHorizontalGroup(
            cropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cropPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RecognizeButton)
                .addContainerGap(120, Short.MAX_VALUE))
        );
        cropPanelLayout.setVerticalGroup(
            cropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cropPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(RecognizeButton)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(errorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cropPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(errorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(cropPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
//        myThread.runnable = false;            // stop thread
//        webSource.release();  // stop caturing fron cam
        try
        {
            if (!(NameEnter.getText().equals("") || NameEnter.getText().equals("Enter your name.")))
            {
                String person = NameEnter.getText();
                File f = new File("TrainingImages\\" + person + index + ".png");
                f.createNewFile();
                ImageIO.write(output, "png", f);
                index++;
                pauseButton.setEnabled(false);   // activate start button 
                startButton.setEnabled(true);     // deactivate stop button
            } else
            {
                this.getLabel().setText("Please enter a name and try again");
                this.getLabel().setVisible(true);
            }
        } catch (IOException ex)
        {

        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

        thread = new DetectorThread();
        thread.running = true;
        thread.initialize(this);
        try
        {
            output = thread.getFace();
        } catch (InterruptedException ex)
        {

        }
        startButton.setEnabled(false);  // deactivate start button
        pauseButton.setEnabled(true); //  activate stop button

    }//GEN-LAST:event_startButtonActionPerformed

    private void NameEnterFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_NameEnterFocusGained
    {//GEN-HEADEREND:event_NameEnterFocusGained
        if (NameEnter.getText().equals("Enter your name."))
        {
            NameEnter.setText("");
        }
    }//GEN-LAST:event_NameEnterFocusGained

    private void NameEnterFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_NameEnterFocusLost
    {//GEN-HEADEREND:event_NameEnterFocusLost
        String trimmed = NameEnter.getText().trim();
        NameEnter.setText(trimmed);
        if (NameEnter.getText().equals(""))
        {
            NameEnter.setText("Enter your name.");
        }
    }//GEN-LAST:event_NameEnterFocusLost

    private void RecognizeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RecognizeButtonActionPerformed
    {//GEN-HEADEREND:event_RecognizeButtonActionPerformed
        File f = new File("TrainingImages");
        HashMap<double[], String> data = convertDirectoryToArray(f);
        double[][] trainingData = new double[200 * 100][data.keySet().size()];
        int index = 0;
        for (double[] d : data.keySet())
        {
            for (int i = 0; i < d.length; i++)
            {
                trainingData[i][index] = d[i];
            }
            index++;
        }
        double[] means = calculateMeans(trainingData);
        for (int i = 0; i < trainingData.length; i++)
        {
            for (int j = 0; j < trainingData[i].length; j++)
            {
                trainingData[i][j] = trainingData[i][j] - means[i];
            }
        }
        for (double[] d : data.keySet())
        {
            for (int i = 0; i < d.length; i++)
            {
                d[i] -= means[i];
            }
        }
        DoubleMatrix2D trainingMatrix = new DenseDoubleMatrix2D(trainingData);
        DoubleMatrix2D trainingMatrixTransposed = Algebra.DEFAULT.transpose(trainingMatrix);

        DoubleMatrix2D covarMatrix = Algebra.DEFAULT.mult(trainingMatrixTransposed, trainingMatrix);
        EigenvalueDecomposition eigens = new EigenvalueDecomposition(covarMatrix);

        DoubleMatrix2D eigenVectors = eigens.getV();
        DoubleMatrix1D eigenValues = eigens.getRealEigenvalues();

        DoubleMatrix2D eigenFaces = Algebra.DEFAULT.mult(eigenVectors, trainingMatrixTransposed);

        DoubleMatrix2D weights = Algebra.DEFAULT.mult(trainingMatrixTransposed, Algebra.DEFAULT.transpose(eigenFaces));

        try
        {
            File newImage = new File("new.png");
            newImage.createNewFile();
            ImageIO.write(output, "png", newImage);
            HashMap<double[], String> newData = convertToArray(newImage);
            for (double[] d : newData.keySet())
            {
                double[] newDataCompare = d;
                DoubleMatrix2D transformedData = transform(newDataCompare, weights, means, eigenFaces);
                String result = (minEuclid(transformedData, trainingData, data));
                if (result != null)
                {
                    this.getLabel().setText("You are: " + result.substring(0, result.length() - 5));
                    this.getLabel().setVisible(true);
                } else
                {
                    this.getLabel().setText("Could not recognize you");
                    this.getLabel().setVisible(true);
                }
            }
            startButton.setEnabled(true);
        } catch (IOException ex)
        {
            this.getLabel().setText("Something went wrong!");
            this.getLabel().setVisible(true);
        }
    }//GEN-LAST:event_RecognizeButtonActionPerformed

    private void PasswordEnterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_PasswordEnterActionPerformed
    {//GEN-HEADEREND:event_PasswordEnterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordEnterActionPerformed

    private void PasswordEnterFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_PasswordEnterFocusGained
    {//GEN-HEADEREND:event_PasswordEnterFocusGained
        if (PasswordEnter.getText().equals("Enter your password."))
        {
            PasswordEnter.setText("");
        }
    }//GEN-LAST:event_PasswordEnterFocusGained

    private void PasswordEnterFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_PasswordEnterFocusLost
    {//GEN-HEADEREND:event_PasswordEnterFocusLost
        String trimmed = PasswordEnter.getText().trim();
        PasswordEnter.setText(trimmed);
        if (PasswordEnter.getText().equals(""))
        {
            PasswordEnter.setText("Enter your password.");
        }
    }//GEN-LAST:event_PasswordEnterFocusLost

    public static String minEuclid(DoubleMatrix2D transformedData, double[][] trainingData, HashMap<double[], String> data)
    {
        DoubleMatrix2D allDistances = Statistic.distance(transformedData, EUCLID);
        ArrayList<Double> distances = new ArrayList<>();
        for (int i = 0; i < allDistances.columns(); i++)
        {
            distances.add(allDistances.getQuick(0, i));
        }
        distances.sort(null);
        double target = distances.get(1);
        if (target >= 2 * Math.pow(10, 17))
        {
            return null;
        }
        boolean isFound = false;
        int index = 1;
        while (!isFound)
        {
            if (allDistances.getQuick(0, index) == target)
            {
                isFound = true;
            } else
            {
                index++;
            }
        }
        double[] result = new double[200 * 100];
        for (int i = 0; i < trainingData.length; i++)
        {
            result[i] = (trainingData[i][index - 1]);
        }
        for (double[] d : data.keySet())
        {
            if (Arrays.equals(result, d))
            {
                return data.get(d);
            }
        }
        return null;
    }

    public static DoubleMatrix2D transform(double[] newData, DoubleMatrix2D weights, double[] means, DoubleMatrix2D eigenFaces)
    {
        weights = Algebra.DEFAULT.transpose(weights);
        int rows = weights.rows();
        int columns = weights.columns();
        DoubleMatrix2D result = new DenseDoubleMatrix2D(rows, columns + 1);
        for (int i = 0; i < newData.length; i++)
        {
            newData[i] -= means[i];
        }
        DoubleMatrix2D data = new DenseDoubleMatrix2D(1, newData.length);
        for (int i = 0; i < newData.length; i++)
        {
            data.setQuick(0, i, newData[i]);
        }
        data = Algebra.DEFAULT.mult(data, Algebra.DEFAULT.transpose(eigenFaces));
        for (int i = 0; i < data.columns(); i++)
        {
            result.setQuick(i, 0, data.getQuick(0, i));
        }
        for (int i = 0; i < rows; i++)
        {
            for (int j = 1; j <= columns; j++)
            {
                result.setQuick(i, j, weights.getQuick(i, j - 1));
            }
        }
        return result;
    }

    public static double[] calculateMeans(double[][] trainingData)
    {
        double[] means = new double[trainingData.length];
        for (int i = 0; i < trainingData.length; i++)
        {
            double mean = 0;
            for (int j = 0; j < trainingData[i].length; j++)
            {
                mean += trainingData[i][j];
            }
            means[i] = mean / (trainingData[i].length);
        }
        return means;
    }

    public static HashMap<double[], String> convertToArray(File f)
    {
        try
        {
            BufferedImage image = resize(ImageIO.read(f), 100, 200);
            int height = image.getHeight();
            int width = image.getWidth();
            ArrayList<Double> data = new ArrayList<>();
            for (int i = 0; i < height; i++)
            {
                for (int j = 0; j < width; j++)
                {
                    Color c = new Color(image.getRGB(j, i));
                    data.add((double) (c.getRed() * 256 * 256 + c.getGreen() * 256 + c.getBlue()));
                }
            }
            double[] converted = new double[height * width];
            for (int i = 0; i < data.size(); i++)
            {
                converted[i] = data.get(i);
            }
            HashMap<double[], String> result = new HashMap<>();
            result.put(converted, f.getName());
            return result;
        } catch (IOException e)
        {
            System.out.println("An error occurred processing this file: " + f.getName());
        }
        return null;
    }

    private static BufferedImage resize(BufferedImage img, int height, int width)
    {
        //"Java Resize Image to Fixed Width and Height Example." Memory Not Found, 24 Oct. 
        //2017, memorynotfound.com/java-resize-image-fixed-width-height-example/. 
        //Accessed 1 June 2021. 
        Image tmp = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        BufferedImage resized = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = resized.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();
        return resized;
    }

    public static HashMap<double[], String> convertDirectoryToArray(File dataSet)
    {
        File[] trainingSet = dataSet.listFiles();
        HashMap<double[], String> result = new HashMap<>();
        if (trainingSet.length > 0)
        {
            for (int i = 0; i < trainingSet.length; i++)
            {
                File f = trainingSet[i];
                HashMap<double[], String> imageData = convertToArray(f);
                for (double[] d : imageData.keySet())
                {
                    result.put(d, imageData.get(d));
                }
            }
        }
        return result;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(FaceDetection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(FaceDetection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(FaceDetection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(FaceDetection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new FaceDetection().setVisible(true);

            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NameEnter;
    private javax.swing.JTextField PasswordEnter;
    private javax.swing.JButton RecognizeButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel cropPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JPanel errorPanel;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
private int index;
}
